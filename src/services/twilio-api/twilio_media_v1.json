{
  "components": {
    "schemas": {
      "media.v1.media_processor": {
        "properties": {
          "account_sid": {
            "description": "The SID of the Account that created the resource",
            "maxLength": 34,
            "minLength": 34,
            "nullable": true,
            "pattern": "^AC[0-9a-fA-F]{32}$",
            "type": "string"
          },
          "date_created": {
            "description": "The ISO 8601 date and time in GMT when the resource was created",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "date_updated": {
            "description": "The ISO 8601 date and time in GMT when the resource was last updated",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "ended_reason": {
            "description": "The reason why a MediaProcessor ended",
            "nullable": true,
            "type": "string"
          },
          "extension": {
            "description": "The Media Extension name or URL",
            "nullable": true,
            "type": "string"
          },
          "extension_context": {
            "description": "The Media Extension context",
            "nullable": true,
            "type": "string"
          },
          "sid": {
            "description": "The unique string that identifies the resource",
            "maxLength": 34,
            "minLength": 34,
            "nullable": true,
            "pattern": "^ZX[0-9a-fA-F]{32}$",
            "type": "string"
          },
          "status": {
            "description": "The status of the MediaProcessor",
            "enum": [
              "failed",
              "started",
              "ended"
            ],
            "nullable": true,
            "type": "string"
          },
          "status_callback": {
            "description": "The URL to which Twilio will send MediaProcessor event updates",
            "format": "uri",
            "nullable": true,
            "type": "string"
          },
          "status_callback_method": {
            "description": "The HTTP method Twilio should use to call the `status_callback` URL",
            "enum": [
              "HEAD",
              "GET",
              "POST",
              "PATCH",
              "PUT",
              "DELETE"
            ],
            "nullable": true,
            "type": "string"
          },
          "url": {
            "description": "The absolute URL of the resource",
            "format": "uri",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "media.v1.player_streamer": {
        "properties": {
          "account_sid": {
            "description": "The SID of the Account that created the resource",
            "maxLength": 34,
            "minLength": 34,
            "nullable": true,
            "pattern": "^AC[0-9a-fA-F]{32}$",
            "type": "string"
          },
          "date_created": {
            "description": "The ISO 8601 date and time in GMT when the resource was created",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "date_updated": {
            "description": "The ISO 8601 date and time in GMT when the resource was last updated",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "ended_reason": {
            "description": "The reason why a PlayerStreamer ended",
            "enum": [
              "ended-via-api",
              "max-duration-exceeded",
              "stream-disconnected-by-source",
              "unexpected-failure"
            ],
            "nullable": true,
            "type": "string"
          },
          "links": {
            "description": "The URLs of related resources",
            "nullable": true,
            "type": "object"
          },
          "sid": {
            "description": "The unique string that identifies the resource",
            "maxLength": 34,
            "minLength": 34,
            "nullable": true,
            "pattern": "^VJ[0-9a-fA-F]{32}$",
            "type": "string"
          },
          "status": {
            "description": "The status of the PlayerStreamer",
            "enum": [
              "created",
              "started",
              "ended",
              "failed"
            ],
            "nullable": true,
            "type": "string"
          },
          "status_callback": {
            "description": "The URL to which Twilio will send PlayerStreamer event updates",
            "format": "uri",
            "nullable": true,
            "type": "string"
          },
          "status_callback_method": {
            "description": "The HTTP method Twilio should use to call the `status_callback` URL",
            "enum": [
              "HEAD",
              "GET",
              "POST",
              "PATCH",
              "PUT",
              "DELETE"
            ],
            "nullable": true,
            "type": "string"
          },
          "url": {
            "description": "The absolute URL of the resource",
            "format": "uri",
            "nullable": true,
            "type": "string"
          },
          "video": {
            "description": "Whether the PlayerStreamer is configured to stream video",
            "nullable": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "media.v1.player_streamer.player_streamer_playback_grant": {
        "properties": {
          "account_sid": {
            "description": "The SID of the Account that created the resource",
            "maxLength": 34,
            "minLength": 34,
            "nullable": true,
            "pattern": "^AC[0-9a-fA-F]{32}$",
            "type": "string"
          },
          "date_created": {
            "description": "The ISO 8601 date and time in GMT when the resource was created",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "grant": {
            "description": "The grant that authorizes the player sdk to connect to the livestream",
            "nullable": true,
            "type": "object"
          },
          "sid": {
            "description": "The unique string that identifies the PlayerStreamer associated with this PlaybackGrant.",
            "maxLength": 34,
            "minLength": 34,
            "nullable": true,
            "pattern": "^VJ[0-9a-fA-F]{32}$",
            "type": "string"
          },
          "url": {
            "description": "The absolute URL of the resource",
            "format": "uri",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "accountSid_authToken": {
        "scheme": "basic",
        "type": "http"
      }
    }
  },
  "info": {
    "contact": {
      "email": "support@twilio.com",
      "name": "Twilio Support",
      "url": "https://support.twilio.com"
    },
    "description": "This is the public Twilio REST API.",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "termsOfService": "https://www.twilio.com/legal/tos",
    "title": "Twilio - Media",
    "version": "1.22.0"
  },
  "openapi": "3.0.1",
  "paths": {
    "/v1/MediaProcessors": {
      "description": "TODO: Resource-level docs",
      "get": {
        "description": "Returns a list of MediaProcessors.",
        "operationId": "ListMediaProcessor",
        "parameters": [
          {
            "description": "The sort order of the list by `date_created`. Can be: `asc` (ascending) or `desc` (descending) with `desc` as the default.",
            "in": "query",
            "name": "Order",
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Status to filter by, with possible values `started`, `ended` or `failed`.",
            "in": "query",
            "name": "Status",
            "schema": {
              "enum": [
                "failed",
                "started",
                "ended"
              ],
              "type": "string"
            }
          },
          {
            "description": "How many resources to return in each list page. The default is 50, and the maximum is 1000.",
            "in": "query",
            "name": "PageSize",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "media_processors": {
                      "items": {
                        "$ref": "#/components/schemas/media.v1.media_processor"
                      },
                      "type": "array"
                    },
                    "meta": {
                      "properties": {
                        "first_page_url": {
                          "format": "uri",
                          "type": "string"
                        },
                        "key": {
                          "type": "string"
                        },
                        "next_page_url": {
                          "format": "uri",
                          "type": "string"
                        },
                        "page": {
                          "type": "integer"
                        },
                        "page_size": {
                          "type": "integer"
                        },
                        "previous_page_url": {
                          "format": "uri",
                          "type": "string"
                        },
                        "url": {
                          "format": "uri",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "title": "ListMediaProcessorResponse",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "accountSid_authToken": []
          }
        ],
        "x-maturity": [
          "GA"
        ]
      },
      "post": {
        "description": "",
        "operationId": "CreateMediaProcessor",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "Extension": {
                    "description": "The [Media Extension](/docs/live/api/media-extensions-overview) name or URL. Ex: `video-composer-v1-preview`",
                    "type": "string"
                  },
                  "ExtensionContext": {
                    "description": "The context of the Media Extension, represented as a JSON dictionary. See the documentation for the specific [Media Extension](/docs/live/api/media-extensions-overview) you are using for more information about the context to send.",
                    "type": "string"
                  },
                  "ExtensionEnvironment": {
                    "description": "User-defined environment variables for the Media Extension, represented as a JSON dictionary of key/value strings. See the documentation for the specific [Media Extension](/docs/live/api/media-extensions-overview) you are using for more information about whether you need to provide this.",
                    "type": "object"
                  },
                  "StatusCallback": {
                    "description": "The URL to which Twilio will send asynchronous webhook requests for every MediaProcessor event. See [Status Callbacks](/docs/live/status-callbacks) for details.",
                    "format": "uri",
                    "type": "string"
                  },
                  "StatusCallbackMethod": {
                    "description": "The HTTP method Twilio should use to call the `status_callback` URL. Can be `POST` or `GET` and the default is `POST`.",
                    "enum": [
                      "HEAD",
                      "GET",
                      "POST",
                      "PATCH",
                      "PUT",
                      "DELETE"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "Extension",
                  "ExtensionContext"
                ],
                "title": "CreateMediaProcessorRequest",
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/media.v1.media_processor"
                }
              }
            },
            "description": "Created"
          }
        },
        "security": [
          {
            "accountSid_authToken": []
          }
        ],
        "x-maturity": [
          "GA"
        ]
      },
      "servers": [
        {
          "url": "https://media.twilio.com"
        }
      ],
      "x-twilio": {
        "defaultOutputProperties": [
          "sid",
          "status",
          "extension",
          "extension_context"
        ],
        "pathType": "list"
      }
    },
    "/v1/MediaProcessors/{Sid}": {
      "description": "TODO: Resource-level docs",
      "get": {
        "description": "Returns a single MediaProcessor resource identified by a SID.",
        "operationId": "FetchMediaProcessor",
        "parameters": [
          {
            "description": "The SID of the MediaProcessor resource to fetch.",
            "in": "path",
            "name": "Sid",
            "required": true,
            "schema": {
              "maxLength": 34,
              "minLength": 34,
              "pattern": "^ZX[0-9a-fA-F]{32}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/media.v1.media_processor"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "accountSid_authToken": []
          }
        ],
        "x-maturity": [
          "GA"
        ]
      },
      "post": {
        "description": "Updates a MediaProcessor resource identified by a SID.",
        "operationId": "UpdateMediaProcessor",
        "parameters": [
          {
            "description": "The SID of the MediaProcessor resource to update.",
            "in": "path",
            "name": "Sid",
            "required": true,
            "schema": {
              "maxLength": 34,
              "minLength": 34,
              "pattern": "^ZX[0-9a-fA-F]{32}$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "Status": {
                    "description": "The status of the MediaProcessor. Can be `ended`.",
                    "enum": [
                      "ended"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "Status"
                ],
                "title": "UpdateMediaProcessorRequest",
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/media.v1.media_processor"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "accountSid_authToken": []
          }
        ],
        "x-maturity": [
          "GA"
        ]
      },
      "servers": [
        {
          "url": "https://media.twilio.com"
        }
      ],
      "x-twilio": {
        "defaultOutputProperties": [
          "sid",
          "status",
          "extension",
          "extension_context"
        ],
        "pathType": "instance"
      }
    },
    "/v1/PlayerStreamers": {
      "description": "TODO: Resource-level docs",
      "get": {
        "description": "Returns a list of PlayerStreamers.",
        "operationId": "ListPlayerStreamer",
        "parameters": [
          {
            "description": "The sort order of the list by `date_created`. Can be: `asc` (ascending) or `desc` (descending) with `desc` as the default.",
            "in": "query",
            "name": "Order",
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Status to filter by, with possible values `created`, `started`, `ended`, or `failed`.",
            "in": "query",
            "name": "Status",
            "schema": {
              "enum": [
                "created",
                "started",
                "ended",
                "failed"
              ],
              "type": "string"
            }
          },
          {
            "description": "How many resources to return in each list page. The default is 50, and the maximum is 1000.",
            "in": "query",
            "name": "PageSize",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "properties": {
                        "first_page_url": {
                          "format": "uri",
                          "type": "string"
                        },
                        "key": {
                          "type": "string"
                        },
                        "next_page_url": {
                          "format": "uri",
                          "type": "string"
                        },
                        "page": {
                          "type": "integer"
                        },
                        "page_size": {
                          "type": "integer"
                        },
                        "previous_page_url": {
                          "format": "uri",
                          "type": "string"
                        },
                        "url": {
                          "format": "uri",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "player_streamers": {
                      "items": {
                        "$ref": "#/components/schemas/media.v1.player_streamer"
                      },
                      "type": "array"
                    }
                  },
                  "title": "ListPlayerStreamerResponse",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "accountSid_authToken": []
          }
        ],
        "x-maturity": [
          "GA"
        ]
      },
      "post": {
        "description": "",
        "operationId": "CreatePlayerStreamer",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "StatusCallback": {
                    "description": "The URL to which Twilio will send asynchronous webhook requests for every PlayerStreamer event. See [Status Callbacks](/docs/live/status-callbacks) for more details.",
                    "format": "uri",
                    "type": "string"
                  },
                  "StatusCallbackMethod": {
                    "description": "The HTTP method Twilio should use to call the `status_callback` URL. Can be `POST` or `GET` and the default is `POST`.",
                    "enum": [
                      "HEAD",
                      "GET",
                      "POST",
                      "PATCH",
                      "PUT",
                      "DELETE"
                    ],
                    "type": "string"
                  },
                  "Video": {
                    "description": "Specifies whether the PlayerStreamer is configured to stream video. Defaults to `true`.",
                    "type": "boolean"
                  }
                },
                "title": "CreatePlayerStreamerRequest",
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/media.v1.player_streamer"
                }
              }
            },
            "description": "Created"
          }
        },
        "security": [
          {
            "accountSid_authToken": []
          }
        ],
        "x-maturity": [
          "GA"
        ]
      },
      "servers": [
        {
          "url": "https://media.twilio.com"
        }
      ],
      "x-twilio": {
        "defaultOutputProperties": [
          "sid",
          "status"
        ],
        "pathType": "list"
      }
    },
    "/v1/PlayerStreamers/{Sid}": {
      "description": "TODO: Resource-level docs",
      "get": {
        "description": "Returns a single PlayerStreamer resource identified by a SID.",
        "operationId": "FetchPlayerStreamer",
        "parameters": [
          {
            "description": "The SID of the PlayerStreamer resource to fetch.",
            "in": "path",
            "name": "Sid",
            "required": true,
            "schema": {
              "maxLength": 34,
              "minLength": 34,
              "pattern": "^VJ[0-9a-fA-F]{32}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/media.v1.player_streamer"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "accountSid_authToken": []
          }
        ],
        "x-maturity": [
          "GA"
        ]
      },
      "post": {
        "description": "Updates a PlayerStreamer resource identified by a SID.",
        "operationId": "UpdatePlayerStreamer",
        "parameters": [
          {
            "description": "The SID of the PlayerStreamer resource to update.",
            "in": "path",
            "name": "Sid",
            "required": true,
            "schema": {
              "maxLength": 34,
              "minLength": 34,
              "pattern": "^VJ[0-9a-fA-F]{32}$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "Status": {
                    "description": "The status the PlayerStreamer should be transitioned to. Can be: `ended`.",
                    "enum": [
                      "ended"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "Status"
                ],
                "title": "UpdatePlayerStreamerRequest",
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/media.v1.player_streamer"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "accountSid_authToken": []
          }
        ],
        "x-maturity": [
          "GA"
        ]
      },
      "servers": [
        {
          "url": "https://media.twilio.com"
        }
      ],
      "x-twilio": {
        "defaultOutputProperties": [
          "sid",
          "status"
        ],
        "pathType": "instance"
      }
    },
    "/v1/PlayerStreamers/{Sid}/PlaybackGrant": {
      "description": "TODO: Resource-level docs",
      "get": {
        "description": "**This method is not enabled.** Returns a single PlaybackGrant resource identified by a SID.",
        "operationId": "FetchPlayerStreamerPlaybackGrant",
        "parameters": [
          {
            "description": "The SID of the PlayerStreamer resource to fetch.",
            "in": "path",
            "name": "Sid",
            "required": true,
            "schema": {
              "maxLength": 34,
              "minLength": 34,
              "pattern": "^VJ[0-9a-fA-F]{32}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/media.v1.player_streamer.player_streamer_playback_grant"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "accountSid_authToken": []
          }
        ],
        "x-maturity": [
          "GA"
        ]
      },
      "post": {
        "description": "",
        "operationId": "CreatePlayerStreamerPlaybackGrant",
        "parameters": [
          {
            "description": "The unique string generated to identify the PlayerStreamer resource associated with this PlaybackGrant",
            "in": "path",
            "name": "Sid",
            "required": true,
            "schema": {
              "maxLength": 34,
              "minLength": 34,
              "pattern": "^VJ[0-9a-fA-F]{32}$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "AccessControlAllowOrigin": {
                    "description": "The full origin URL where the livestream can be streamed. If this is not provided, it can be streamed from any domain.",
                    "type": "string"
                  },
                  "Ttl": {
                    "description": "The time to live of the PlaybackGrant. Default value is 15 seconds. Maximum value is 60 seconds.",
                    "type": "integer"
                  }
                },
                "title": "CreatePlayerStreamerPlaybackGrantRequest",
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/media.v1.player_streamer.player_streamer_playback_grant"
                }
              }
            },
            "description": "Created"
          }
        },
        "security": [
          {
            "accountSid_authToken": []
          }
        ],
        "x-maturity": [
          "GA"
        ]
      },
      "servers": [
        {
          "url": "https://media.twilio.com"
        }
      ],
      "x-twilio": {
        "defaultOutputProperties": [],
        "pathType": "instance"
      }
    }
  },
  "servers": [
    {
      "url": "https://media.twilio.com"
    }
  ],
  "x-maturity": [
    {
      "description": "This product is Generally Available.",
      "name": "GA"
    }
  ]
}