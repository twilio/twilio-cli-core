name: Cli-core Release
on:
  workflow_dispatch:
    inputs:
      cli-branch:
        description: 'Run cli workflow in the given branch'
        default: main
      homebrew-branch:
        description: 'HomeBrew branch name'
        default: main
      homebrew-prerelease:
        description: 'HomeBrew prerelease'
        default: 'false'
jobs:
  cli-token-validation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout cli-core repo
        uses: actions/checkout@v2
      - run: |
          git pull
          make install
      - name: Extract branch name
        id: extract_branch
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      - name: Validate REPO_ACCESS_TOKEN
        uses: actions/checkout@v2
        with:
          repository: '${{ github.repository_owner }}/twilio-oai'
          token:  ${{ secrets.REPO_ACCESS_TOKEN }}
      - name: Validate AWS token in twilio-cli project
        run: node .github/scripts/trigger-and-wait.js
        env:
          INPUT_OWNER: ${{ github.repository_owner }}
          INPUT_REPO: twilio-cli
          INPUT_GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
          INPUT_WORKFLOW_FILE_NAME: release-token-validation.yml
          INPUT_WAITING_INTERVAL: 10

#  notify-start:
#    needs: [ cli-token-validation ]
#    name: Notify Release Started
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - name: Extract branch name
#        id: extract_branch
#        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
#      - name: Slack Notification
#        if: ${{steps.extract_branch.outputs.branch == 'main' }}
#        uses: rtCamp/action-slack-notify@v2
#        env:
#          SLACK_WEBHOOK: ${{ secrets.SLACK_WEB_HOOK }}
#          SLACK_COLOR: "#36a64f"
#          SLACK_USERNAME: CLI Release Bot
#          SLACK_ICON_EMOJI: ":ship:"
#          SLACK_TITLE: "Twilio Cli"
#          SLACK_MESSAGE: 'Release Started :rocket:'
#          MSG_MINIMAL: actions url
  test:
    needs: [ cli-token-validation ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x, 22.x, lts/*]
    steps:
      - name: Checkout cli-core repo
        uses: actions/checkout@v4
      - run: make install
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Run tests
        run: make test
  update-api-specs:
    runs-on: ubuntu-latest
    needs: [ test ]
    outputs:
      change-log: ${{ steps.update-specs.outputs.change-log }}
      version-type: ${{ steps.update-specs.outputs.version-type }}
    steps:
      - name: Create temporary folder for copying json files from OAI repo
        run: mkdir -p ~/oai_definitions/json
      - name: Checkout OAI repo
        uses: actions/checkout@v2
        with:
          repository: '${{ github.repository_owner }}/twilio-oai'
          token:  ${{ secrets.REPO_ACCESS_TOKEN }}
      - run: |
          cp -R spec/json/. ~/oai_definitions/json/
          cp -R CHANGES.md ~/oai_definitions/CHANGES.md
      - name: Checkout cli-core repo
        uses: actions/checkout@v2
        with:
          token:  ${{ secrets.REPO_ACCESS_TOKEN }}
      - name: Update OAI specs
        id: update-specs
        run: |
          make install
          cp -R ~/oai_definitions/CHANGES.md OAI_CHANGES.md
          source .github/scripts/update-api-spec-with-changelog.sh
          echo "::set-output name=change-log::$changeLog"
          echo "::set-output name=version-type::$versionType"
  release:
    runs-on: ubuntu-latest
    needs: [update-api-specs]
    outputs:
      tag-name: ${{ steps.update-release.outputs.TAG_NAME }}
    steps:
      - name: Checkout cli-core repo
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - run: |
          git pull
          make install
      - name: Use Node.js 18.x
        uses: actions/setup-node@v2
        with:
          node-version: 18.x
      - name: semanticRelease
        id: semantic-release
        run: DEBUG=semantic-release:* npx semantic-release -t \${version}
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Update release
        id: update-release
        run: |
          echo "::set-output name=TAG_NAME::$TAG_NAME"
          fileName="$GITHUB_WORKSPACE/.github/scripts/update-release.js"
          node -e "require('$fileName').updateRelease()"
        env:
          REPO_ACCESS_TOKEN: ${{ github.token }}
          TAG_NAME: ${{ steps.semantic-release.outputs.TAG_NAME }}
          RELEASE_BODY: ${{needs.update-api-specs.outputs.change-log}}
          REPO_NAME:  ${{ github.repository }}
  post-build-checks:
    runs-on: ubuntu-latest
    needs: [ release ]
    steps:
      - name: Clone twilio-cli repo
        uses: actions/checkout@v4
        with:
          repository: '${{ github.repository_owner }}/twilio-cli'
      - name: Update cli-core version and run tests
        run: |
          node .github/scripts/update-cli-core-release-version.js
          make install
          make test
        env:
          REPO_NAME: ${{ github.repository_owner }}/twilio-cli
          CLI_CORE_TAG: ${{ needs.release.outputs.tag-name }}
  triggerCliWorkflow:
    runs-on: ubuntu-latest
    needs: [ update-api-specs, release, post-build-checks]
    steps:
      - name: Checkout cli-core repo
        uses: actions/checkout@v4
      - run: |
          git pull
          make install
      - name: Invoke CLI workflow with changelog and version-type
        run: |
          fileName="$GITHUB_WORKSPACE/.github/scripts/trigger-workflow.js"
          node -e "require('$fileName').triggerWorkflow()"
        env:
          REPO_ACCESS_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
          WORKFLOW_NAME: 'release.yml'
          BRANCH_NAME: ${{github.event.inputs.cli-branch}}
          REPO_NAME:  ${{ github.repository_owner }}/twilio-cli
          INPUTS: '{ "change-log": ${{ toJSON(needs.update-api-specs.outputs.change-log) }}, "version-type": "${{needs.update-api-specs.outputs.version-type}}", "homebrew-branch": "${{github.event.inputs.homebrew-branch}}", "homebrew-prerelease": "${{github.event.inputs.homebrew-prerelease}}", "tag-name": "${{ needs.release.outputs.tag-name }}" }'
#  notify-complete-fail:
#    if: ${{ (needs.cli-token-validation.result != 'failure' || needs.cli-core-token-validation.result != 'failure' ) && (failure() || cancelled()) }}
#    needs: [ triggerCliWorkflow ]
#    name: Notify Release Failed
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - name: Slack Notification
#        uses: rtCamp/action-slack-notify@v2
#        env:
#          SLACK_WEBHOOK: ${{ secrets.ALERT_SLACK_WEB_HOOK }}
#          SLACK_COLOR: "#ff3333"
#          SLACK_USERNAME: CLI Release Bot
#          SLACK_ICON_EMOJI: ":ship:"
#          SLACK_TITLE: "Twilio Cli-core"
#          SLACK_MESSAGE: 'Release workflow Failed'
#          MSG_MINIMAL: actions url
